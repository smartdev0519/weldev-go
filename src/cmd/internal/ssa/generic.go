// autogenerated from rulegen/generic.rules: do not edit!
// generated with: go run rulegen/rulegen.go rulegen/generic.rules genericRules generic.go
package ssa

func genericRules(v *Value) bool {
	switch v.Op {
	case OpAdd:
		// match: (Add <t> (ConstInt [c]) (ConstInt [d]))
		// cond: is64BitInt(t)
		// result: (ConstInt [{c.(int64)+d.(int64)}])
		{
			t := v.Type
			if v.Args[0].Op != OpConstInt {
				goto end0
			}
			c := v.Args[0].Aux
			if v.Args[1].Op != OpConstInt {
				goto end0
			}
			d := v.Args[1].Aux
			if !(is64BitInt(t)) {
				goto end0
			}
			v.Op = OpConstInt
			v.Aux = nil
			v.Args = v.argstorage[:0]
			v.Aux = c.(int64) + d.(int64)
			return true
		}
	end0:
		;
	case OpLoad:
		// match: (Load (FPAddr [offset]) mem)
		// cond:
		// result: (LoadFP [offset] mem)
		{
			if v.Args[0].Op != OpFPAddr {
				goto end1
			}
			offset := v.Args[0].Aux
			mem := v.Args[1]
			v.Op = OpLoadFP
			v.Aux = nil
			v.Args = v.argstorage[:0]
			v.Aux = offset
			v.AddArg(mem)
			return true
		}
	end1:
		;
		// match: (Load (SPAddr [offset]) mem)
		// cond:
		// result: (LoadSP [offset] mem)
		{
			if v.Args[0].Op != OpSPAddr {
				goto end2
			}
			offset := v.Args[0].Aux
			mem := v.Args[1]
			v.Op = OpLoadSP
			v.Aux = nil
			v.Args = v.argstorage[:0]
			v.Aux = offset
			v.AddArg(mem)
			return true
		}
	end2:
		;
	case OpStore:
		// match: (Store (FPAddr [offset]) val mem)
		// cond:
		// result: (StoreFP [offset] val mem)
		{
			if v.Args[0].Op != OpFPAddr {
				goto end3
			}
			offset := v.Args[0].Aux
			val := v.Args[1]
			mem := v.Args[2]
			v.Op = OpStoreFP
			v.Aux = nil
			v.Args = v.argstorage[:0]
			v.Aux = offset
			v.AddArg(val)
			v.AddArg(mem)
			return true
		}
	end3:
		;
		// match: (Store (SPAddr [offset]) val mem)
		// cond:
		// result: (StoreSP [offset] val mem)
		{
			if v.Args[0].Op != OpSPAddr {
				goto end4
			}
			offset := v.Args[0].Aux
			val := v.Args[1]
			mem := v.Args[2]
			v.Op = OpStoreSP
			v.Aux = nil
			v.Args = v.argstorage[:0]
			v.Aux = offset
			v.AddArg(val)
			v.AddArg(mem)
			return true
		}
	end4:
	}
	return false
}
