// Copyright 2009 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// This test tests some internals of the flate package.
// The tests in package compress/gzip serve as the
// end-to-end test of the decompressor.

package flate

import (
	"bytes"
	"encoding/hex"
	"io/ioutil"
	"testing"
)

func TestUncompressedSource(t *testing.T) {
	decoder := NewReader(bytes.NewReader([]byte{0x01, 0x01, 0x00, 0xfe, 0xff, 0x11}))
	output := make([]byte, 1)
	n, error := decoder.Read(output)
	if n != 1 || error != nil {
		t.Fatalf("decoder.Read() = %d, %v, want 1, nil", n, error)
	}
	if output[0] != 0x11 {
		t.Errorf("output[0] = %x, want 0x11", output[0])
	}
}

// The following test should not panic.
func TestIssue5915(t *testing.T) {
	bits := []int{4, 0, 0, 6, 4, 3, 2, 3, 3, 4, 4, 5, 0, 0, 0, 0, 5, 5, 6,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 8, 6, 0, 11, 0, 8, 0, 6, 6, 10, 8}
	var h huffmanDecoder
	if h.init(bits) {
		t.Fatalf("Given sequence of bits is bad, and should not succeed.")
	}
}

// The following test should not panic.
func TestIssue5962(t *testing.T) {
	bits := []int{4, 0, 0, 6, 4, 3, 2, 3, 3, 4, 4, 5, 0, 0, 0, 0,
		5, 5, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11}
	var h huffmanDecoder
	if h.init(bits) {
		t.Fatalf("Given sequence of bits is bad, and should not succeed.")
	}
}

// The following test should not panic.
func TestIssue6255(t *testing.T) {
	bits1 := []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 11}
	bits2 := []int{11, 13}
	var h huffmanDecoder
	if !h.init(bits1) {
		t.Fatalf("Given sequence of bits is good and should succeed.")
	}
	if h.init(bits2) {
		t.Fatalf("Given sequence of bits is bad and should not succeed.")
	}
}

func TestInvalidEncoding(t *testing.T) {
	// Initialize Huffman decoder to recognize "0".
	var h huffmanDecoder
	if !h.init([]int{1}) {
		t.Fatal("Failed to initialize Huffman decoder")
	}

	// Initialize decompressor with invalid Huffman coding.
	var f decompressor
	f.r = bytes.NewReader([]byte{0xff})

	_, err := f.huffSym(&h)
	if err == nil {
		t.Fatal("Should have rejected invalid bit sequence")
	}
}

func TestInvalidBits(t *testing.T) {
	oversubscribed := []int{1, 2, 3, 4, 4, 5}
	incomplete := []int{1, 2, 4, 4}
	var h huffmanDecoder
	if h.init(oversubscribed) {
		t.Fatal("Should reject oversubscribed bit-length set")
	}
	if h.init(incomplete) {
		t.Fatal("Should reject incomplete bit-length set")
	}
}

func TestDegenerateHuffmanCoding(t *testing.T) {
	// This test case is notable because:
	//   1. It's decompressable by zlib.
	//   2. It was generated by Go 1.4's compress/flate package.
	//   3. It uses a degenerate dynamic Huffman coding block.
	//
	// The input is somewhat contrived though.  It's a sequence of
	// 258 bytes with no 3+ byte sequence occuring more than once,
	// except that the whole sequence is repeated twice.  This
	// results in package flate emitting a single match token,
	// which consequently means a single symbol in the distance
	// coding table.
	//
	// Additionally, it uses very few unique byte values so that
	// the overhead from storing the dynamic Huffman coding still
	// results in a smaller encoding than using the fixed Huffman
	// coding.
	const (
		originalHalf = "00013534215002452243512505010034133042401113" +
			"400415101454022532410254513251155411055331124453555" +
			"023120320201523334303524252551414033503012344230210" +
			"310431305153005314321221315440455204052144332205422" +
			"235434504441211420062622646656236416326065565261624" +
			"6256136546"
		compressedHex = "ecd081000030104251a5fad5f9a34d640a4f92b3144" +
			"fa28366669a2ca54e542adba954cf7257c1422dd639ccde6a6b" +
			"4b6cda659b885110f248d228a38ccd75954c91494b8415ab713" +
			"42fd2e20683e3b5ea86aae13601ad40d6746a6bec221d07d7bb" +
			"1db9fac2e9b61be7a3c7ceb9f5bec00b0000ffffecd08100003" +
			"0104251a5fad5f9a34d640a4f92b3144fa28366669a2ca54e54" +
			"2adba954cf7257c1422dd639ccde6a6b4b6cda659b885110f24" +
			"8d228a38ccd75954c91494b8415ab71342fd2e20683e3b5ea86" +
			"aae13601ad40d6746a6bec221d07d7bb1db9fac2e9b61be7a3c" +
			"7ceb9f5bec00b0000ffff"
	)

	compressed, err := hex.DecodeString(compressedHex)
	if err != nil {
		t.Fatal(err)
	}
	data, err := ioutil.ReadAll(NewReader(bytes.NewReader(compressed)))
	if err != nil {
		t.Fatal(err)
	}
	if string(data) != originalHalf+originalHalf {
		t.Fatal("Decompressed data does not match original")
	}
}
